

R0: initialiser une liste vide
   R1: Affecter 0 à la taille
exemple:
Initialiser(Liste : out T_Liste)

R0: Ajouter un element
   R1: Augmenter la taille de 1
   R1: Mettre l'element dans la liste à l'index correspondant à la taille
exemple:
procedure Ajouter(Liste : in out T_Liste; Element : in T_Type)

R0: Modifier un element
   R1: Supprimer l'ancien element
      TODO
   R1: Affecter une nouvelle valeur a l'element
exemple:
procedure Modifier(Liste : in out T_Liste; Element : in T_Type; Index : in Natural)

   -- Insere un élément à la liste à l'index voulus (le reste est décalé a droite)
   procedure Inserer(Liste : in out T_Liste; Element : in T_Type; Index : in Natural) with
   Pre => Index <= Liste.Taille AND Liste.Taille < Capacite;

   -- Supprimer le dernier élément de la liste
   procedure Supprimer(Liste : in out T_Liste; Index : in Natural) with
   Pre => Liste.Taille > 0;

R0: Obtenir un element de la liste
   R1: Acceder a l'element
   R1: Renvoyer l'element
function Obtenir(Liste : in T_Liste; Index : in Natural) return T_Type

   -- Vérifier si la liste est pleine
   function Est_Pleine(Liste : in T_Liste) return Boolean;

   -- Vérifier si la liste est vide
   function Est_Vide(Liste : in T_Liste) return Boolean;

   -- Renvoie le nombre d'élements de la liste
   function Taille(Liste : in T_Liste) return Natural;

      -- ajoute les element de la liste2 à la fin de la liste 1
   procedure Concatener(Liste1 : in out T_Liste; Liste2 : in T_Liste) with
   Pre => (Liste1.Taille + Liste2.Taille) <= Capacite;


------------------------------------------------ TYPE -------------------------------------------------

T_Contenu is array (1 .. Capacite) of T_Type;

type T_Liste is tagged record
   Contenu : T_Contenu;
   Taille  : Integer := 0;
end record;
